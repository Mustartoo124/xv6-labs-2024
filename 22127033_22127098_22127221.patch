diff --git a/answers-pgtbl.txt b/answers-pgtbl.txt
new file mode 100644
index 0000000..5d826f4
--- /dev/null
+++ b/answers-pgtbl.txt
@@ -0,0 +1,17 @@
+1. Which other xv6 system call(s) could be made faster using this shared page? Explain how.
+
+- Any system call that invokes the copyout() function could be made faster, 
+as it saves time on copying data. 
+- The system calls for information retrieval, like getpid(), will also be faster, 
+as trapping from usermode is no longer necessary, data can be read in usermode instead.
+
+------------------------------------------------------------------------------------------------------------
+2.Explain the output of vmprint in terms of Fig 3-4 from the text. 
+What does page 0 contain? What is in page 2? 
+When running in user mode, could the process read/write the memory mapped by page 1? 
+What does the third to last page contain?
+
+- Page 0 maps the ‘load program into memory’, so it contains the data and the text section for the process.
+- Page 2 contains the process’s stack. 
+- User mode can’t read/write the memory mapped by page 1 because it contains the guard page.
+- The third to last page contains the heap, trapframe, trampoline.
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..487f4f2 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -173,6 +173,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..17cdb2d 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -128,6 +128,11 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  // Print page table
+  if(p->pid == 1){
+    vmprint(p->pagetable);
+  }
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..e170e64 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -132,6 +132,13 @@ found:
     return 0;
   }
 
+  if ((p->usyscallpage = (struct usyscall *)kalloc()) == 0) {
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+  p->usyscallpage->pid = p->pid;
+
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
@@ -158,6 +165,11 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+
+  if(p->usyscallpage)
+    kfree((void *)p->usyscallpage);
+  p->usyscallpage = 0;
+
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
@@ -183,6 +195,12 @@ proc_pagetable(struct proc *p)
   if(pagetable == 0)
     return 0;
 
+  if(mappages(pagetable, USYSCALL, PGSIZE,
+              (uint64)(p->usyscallpage), PTE_U | PTE_R) < 0){
+    uvmfree(pagetable, 0);
+    return 0;
+  }
+
   // map the trampoline code (for system call return)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
@@ -212,6 +230,7 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmap(pagetable, USYSCALL, 1, 0);
   uvmfree(pagetable, sz);
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..80a475a 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct usyscall *usyscallpage;
 };
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..100895e 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_A (1L << 6)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 88644b2..b623f22 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -74,8 +74,29 @@ sys_sleep(void)
 int
 sys_pgaccess(void)
 {
-  // lab pgtbl: your code here.
-  return 0;
+    uint64 va;
+    int pagenum;
+    uint64 abitsaddr;
+    argaddr(0, &va);
+    argint(1, &pagenum);
+    argaddr(2, &abitsaddr);
+
+    uint64 maskbits = 0;
+    struct proc *proc = myproc();
+    for (int i = 0; i < pagenum; i++) {
+        pte_t *pte = walk(proc->pagetable, va+i*PGSIZE, 0);
+        if (pte == 0)
+            panic("page not exist.");
+        if (PTE_FLAGS(*pte) & PTE_A) {
+            maskbits = maskbits | (1L << i);
+        }
+        // clear PTE_A, set PTE_A bits zero
+        *pte = ((*pte&PTE_A) ^ *pte) ^ 0 ;
+    }
+    if (copyout(proc->pagetable, abitsaddr, (char *)&maskbits, sizeof(maskbits)) < 0)
+        panic("sys_pgacess copyout error");
+
+    return 0;
 }
 #endif
 
@@ -100,3 +121,4 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..c96c196 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -449,3 +449,45 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+// Support function to find and print the content of each PTE
+void
+printpgtb(pagetable_t pagetable, int level)
+{
+  // there are 2^9 = 512 PTEs in a page table.
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
+      // this PTE points to a lower-level page table.
+      uint64 child = PTE2PA(pte);
+      for(int j = 0; j <= level; j++){
+        if(j != level)
+          printf(".. ");
+        else printf("..");
+      }
+      printf("%d: pte %p pa %p\n", i, pte, child);
+      printpgtb((pagetable_t)child, level + 1); // recursively calls printpgtb() 
+                                                // on the child page table
+    }
+    else if(pte & PTE_V){
+      // leaf 
+      uint64 child = PTE2PA(pte);
+      for(int j = 0; j <= level; j++){
+        if(j != level)
+          printf(".. ");
+        else printf("..");
+      }
+      printf("%d: pte %p pa %p\n", i, pte, child);
+    }
+  }
+}
+
+// Print page table
+void 
+vmprint(pagetable_t pagetable)
+{
+  printf("page table %p\n", pagetable);
+  printpgtb(pagetable, 0);
+}
+
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..8580e7b
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+30
\ No newline at end of file
